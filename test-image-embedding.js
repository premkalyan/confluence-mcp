#!/usr/bin/env node

/**
 * Test image embedding in Confluence:
 * 1. Generate Mermaid diagram
 * 2. Convert to PNG image
 * 3. Embed in Confluence page
 */

import { createCanvas } from 'canvas';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const API_URL = 'https://confluence-mcp-six.vercel.app/api/mcp';
const BEARER_TOKEN = 'pk_NTWl4DhbqsJ2xflMRtT9rhRJEj8FxQW-YCMPABtapFQ';

async function makeRequest(toolName, args = {}) {
  const response = await fetch(API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${BEARER_TOKEN}`
    },
    body: JSON.stringify({
      jsonrpc: '2.0',
      id: Math.floor(Math.random() * 10000),
      method: 'tools/call',
      params: {
        name: toolName,
        arguments: args
      }
    })
  });

  const result = await response.json();
  return result;
}

function extractPageId(result) {
  if (!result.result?.result) return null;
  const data = result.result.result;
  return data.id || data.pageId || null;
}

// Generate a simple diagram image using canvas
function generateDiagramImage() {
  console.log('üìä Generating Mermaid-style diagram image...');

  const width = 800;
  const height = 600;
  const canvas = createCanvas(width, height);
  const ctx = canvas.getContext('2d');

  // Background
  ctx.fillStyle = '#ffffff';
  ctx.fillRect(0, 0, width, height);

  // Title
  ctx.fillStyle = '#2c3e50';
  ctx.font = 'bold 32px Arial';
  ctx.textAlign = 'center';
  ctx.fillText('System Architecture Diagram', width / 2, 50);

  // Draw boxes (representing nodes)
  const boxes = [
    { x: 400, y: 150, label: 'Frontend', color: '#3498db' },
    { x: 200, y: 300, label: 'API Gateway', color: '#2ecc71' },
    { x: 600, y: 300, label: 'Auth Service', color: '#e74c3c' },
    { x: 400, y: 450, label: 'Database', color: '#f39c12' }
  ];

  // Draw arrows first (behind boxes)
  ctx.strokeStyle = '#95a5a6';
  ctx.lineWidth = 2;
  ctx.setLineDash([5, 5]);

  // Frontend -> API Gateway
  drawArrow(ctx, 400, 180, 250, 280);
  // Frontend -> Auth Service
  drawArrow(ctx, 400, 180, 550, 280);
  // API Gateway -> Database
  drawArrow(ctx, 250, 330, 370, 430);
  // Auth Service -> Database
  drawArrow(ctx, 550, 330, 430, 430);

  ctx.setLineDash([]);

  // Draw boxes
  boxes.forEach(box => {
    const boxWidth = 180;
    const boxHeight = 60;

    // Shadow
    ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
    ctx.fillRect(box.x - boxWidth/2 + 3, box.y - boxHeight/2 + 3, boxWidth, boxHeight);

    // Box
    ctx.fillStyle = box.color;
    ctx.fillRect(box.x - boxWidth/2, box.y - boxHeight/2, boxWidth, boxHeight);

    // Border
    ctx.strokeStyle = '#2c3e50';
    ctx.lineWidth = 2;
    ctx.strokeRect(box.x - boxWidth/2, box.y - boxHeight/2, boxWidth, boxHeight);

    // Label
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 18px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText(box.label, box.x, box.y);
  });

  // Legend
  ctx.fillStyle = '#7f8c8d';
  ctx.font = '14px Arial';
  ctx.textAlign = 'left';
  ctx.fillText('Generated by Confluence MCP Test', 20, height - 20);

  console.log('‚úÖ Diagram image generated');
  return canvas.toBuffer('image/png');
}

function drawArrow(ctx, fromX, fromY, toX, toY) {
  const headlen = 10;
  const angle = Math.atan2(toY - fromY, toX - fromX);

  // Line
  ctx.beginPath();
  ctx.moveTo(fromX, fromY);
  ctx.lineTo(toX, toY);
  ctx.stroke();

  // Arrow head
  ctx.beginPath();
  ctx.moveTo(toX, toY);
  ctx.lineTo(toX - headlen * Math.cos(angle - Math.PI / 6), toY - headlen * Math.sin(angle - Math.PI / 6));
  ctx.lineTo(toX - headlen * Math.cos(angle + Math.PI / 6), toY - headlen * Math.sin(angle + Math.PI / 6));
  ctx.closePath();
  ctx.fillStyle = '#95a5a6';
  ctx.fill();
}

async function testImageEmbedding() {
  console.log('üß™ Testing Complete Image Embedding Workflow');
  console.log('=' .repeat(70));
  console.log(`üì° API Endpoint: ${API_URL}`);
  console.log('');

  try {
    // Step 1: Generate diagram image
    const imageBuffer = generateDiagramImage();
    const imageBase64 = imageBuffer.toString('base64');
    console.log(`üìè Image size: ${(imageBuffer.length / 1024).toFixed(2)} KB`);
    console.log('');

    // Step 2: Create Confluence page
    // Note: spaceKey is optional - it will use the space from project registry config (SA1)
    console.log('üìÑ Step 1: Creating Confluence page...');
    const timestamp = new Date().toISOString().slice(0, 19).replace('T', ' ');
    const createResult = await makeRequest('create_page', {
      // spaceKey is omitted - will be fetched from project registry config
      title: `Architecture Diagram Test - ${timestamp}`,
      content: '<h1>System Architecture</h1><p>This page demonstrates automated diagram embedding.</p>'
    });

    if (createResult.error) {
      console.error('‚ùå Failed to create page:', createResult.error.message);
      return;
    }

    const pageId = extractPageId(createResult);
    if (!pageId) {
      console.error('‚ùå Could not extract page ID from response');
      console.log('Response:', JSON.stringify(createResult, null, 2));
      return;
    }

    console.log(`‚úÖ Page created: ${pageId}`);
    console.log('');

    // Step 3: Upload and embed the diagram
    console.log('üñºÔ∏è  Step 2: Uploading and embedding diagram...');

    // Method 1: Try with base64 data - file must be an object with name, data, and mimeType
    const uploadResult = await makeRequest('upload_and_embed_document', {
      pageId: pageId,
      file: {
        name: 'architecture-diagram.png',
        data: imageBase64,
        mimeType: 'image/png'
      },
      comment: 'System architecture diagram - automated test',
      width: 800,
      position: 'center'
    });

    if (uploadResult.error) {
      console.error('‚ùå Failed to upload image:', uploadResult.error.message);
      console.error('Error details:', JSON.stringify(uploadResult.error, null, 2));
      return;
    }

    console.log('‚úÖ Image uploaded and embedded successfully!');
    console.log('');

    // Step 4: Verify by getting page details
    console.log('üîç Step 3: Verifying page update...');
    const verifyResult = await makeRequest('get_content_by_id', {
      id: pageId,
      expand: ['body.storage', 'version']
    });

    if (verifyResult.result?.result) {
      const pageData = verifyResult.result.result;
      console.log(`‚úÖ Page verified:`);
      console.log(`   Version: ${pageData.version?.number || 'N/A'}`);
      console.log(`   Title: ${pageData.title || 'N/A'}`);
      if (pageData._links?.webui && pageData._links?.base) {
        console.log(`   URL: ${pageData._links.base}${pageData._links.webui}`);
      }
    }

    console.log('');
    console.log('=' .repeat(70));
    console.log('üéâ Image Embedding Test Complete!');
    console.log('=' .repeat(70));
    console.log('');
    console.log('Summary:');
    console.log('‚úÖ Diagram generated (800x600 PNG)');
    console.log('‚úÖ Confluence page created');
    console.log('‚úÖ Image uploaded and embedded');
    console.log('‚úÖ Page verified');
    console.log('');

    // Get the correct URL from the verify result
    if (verifyResult.result?.result?._links) {
      const links = verifyResult.result.result._links;
      if (links.base && links.webui) {
        console.log(`üîó View page: ${links.base}${links.webui}`);
      }
    }

  } catch (error) {
    console.error('‚ùå Test failed:', error);
    throw error;
  }
}

// Run the test
testImageEmbedding().catch(error => {
  console.error('Test failed:', error);
  process.exit(1);
});
